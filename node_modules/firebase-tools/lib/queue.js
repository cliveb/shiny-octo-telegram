"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("./logger");
function _backoff(retryNumber, delay) {
    return new Promise((resolve) => {
        setTimeout(resolve, delay * Math.pow(2, retryNumber));
    });
}
function DEFAULT_HANDLER(task) {
    return task();
}
class Queue {
    constructor(options) {
        this.name = "queue";
        this.concurrency = 200;
        this.handler = DEFAULT_HANDLER;
        this.cursor = 0;
        this.active = 0;
        this.complete = 0;
        this.success = 0;
        this.errored = 0;
        this.retried = 0;
        this.total = 0;
        this.tasks = {};
        this.waits = [];
        this.min = 9999999999;
        this.max = 0;
        this.avg = 0;
        this.retries = 0;
        this.backoff = 200;
        this.retryCounts = {};
        this.closed = false;
        this.finished = false;
        this.startTime = 0;
        if (options.name) {
            this.name = options.name;
        }
        if (options.handler) {
            this.handler = options.handler;
        }
        if (typeof options.concurrency === "number") {
            this.concurrency = options.concurrency;
        }
        if (typeof options.retries === "number") {
            this.retries = options.retries;
        }
        if (typeof options.backoff === "number") {
            this.backoff = options.backoff;
        }
        if (typeof options.backoff === "number") {
            this.backoff = options.backoff;
        }
    }
    wait() {
        const p = new Promise((resolve, reject) => {
            this.waits.push({ resolve, reject });
        });
        return p;
    }
    add(task) {
        if (this.closed) {
            throw new Error("Cannot add a task to a closed queue.");
        }
        if (!this.startTime) {
            this.startTime = Date.now();
        }
        this.tasks[this.total] = task;
        this.total++;
        this.process();
    }
    close() {
        this.closed = true;
        return this._finishIfIdle();
    }
    process() {
        if (this._finishIfIdle() || this.active >= this.concurrency || this.cursor === this.total) {
            return;
        }
        this.cursor++;
        this.active++;
        this.handle(this.cursor - 1);
    }
    handle(cursorIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const task = this.tasks[cursorIndex];
            const tname = this.taskName(cursorIndex);
            const t0 = Date.now();
            try {
                yield this.handler(task);
                const dt = Date.now() - t0;
                if (dt < this.min) {
                    this.min = dt;
                }
                if (dt > this.max) {
                    this.max = dt;
                }
                this.avg = (this.avg * this.complete + dt) / (this.complete + 1);
                this.success++;
                this.complete++;
                this.active--;
                delete this.tasks[cursorIndex];
                delete this.retryCounts[cursorIndex];
                this.process();
            }
            catch (err) {
                if (this.retries > 0) {
                    this.retryCounts[cursorIndex] = this.retryCounts[cursorIndex] || 0;
                    if (this.retryCounts[cursorIndex] < this.retries) {
                        this.retryCounts[cursorIndex]++;
                        this.retried++;
                        yield _backoff(this.retryCounts[cursorIndex], this.backoff);
                        logger.debug(`[${this.name}] Retrying task`, tname);
                        return this.handle(cursorIndex);
                    }
                }
                this.errored++;
                this.complete++;
                this.active--;
                if (this.retryCounts[cursorIndex] > 0) {
                    logger.debug(`[${this.name}] Retries exhausted for task ${tname}:`, err);
                }
                else {
                    logger.debug(`[${this.name}] Error on task ${tname}:`, err);
                }
                this._finish(err);
            }
        });
    }
    stats() {
        return {
            max: this.max,
            min: this.min,
            avg: this.avg,
            active: this.active,
            complete: this.complete,
            success: this.success,
            errored: this.errored,
            retried: this.retried,
            total: this.total,
            elapsed: Date.now() - this.startTime,
        };
    }
    taskName(cursorIndex) {
        const task = this.tasks[cursorIndex] || "finished task";
        return typeof task === "string" ? task : `index ${cursorIndex}`;
    }
    _finishIfIdle() {
        if (this.closed && this.cursor === this.total && this.active === 0) {
            this._finish(null);
            return true;
        }
        return false;
    }
    _finish(err) {
        this.waits.forEach((p) => {
            if (err) {
                return p.reject(err);
            }
            this.finished = true;
            return p.resolve();
        });
    }
}
exports.Queue = Queue;
exports.default = Queue;
//# sourceMappingURL=queue.js.map